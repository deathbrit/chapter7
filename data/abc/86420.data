environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\DELL\\AppData\\Roaming', 'CLASSPATH': 'C:\\Program Files\\Java\\jdk-12.0.2\\lib', 'CLION': 'E:\\CLion 2018.3.4\\bin;', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'DESKTOP-A40F9PR', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\DELL', 'JAVA': '+XX:AggressiveHeap', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk-12.0.2', 'LOCALAPPDATA': 'C:\\Users\\DELL\\AppData\\Local', 'LOGONSERVER': '\\\\DESKTOP-A40F9PR', 'NUMBER_OF_PROCESSORS': '8', 'ONEDRIVE': 'C:\\Users\\DELL\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'E:\\python黑客编程\\venv\\Scripts;E:\\Xshell\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Java\\jdk-12.0.2\\bin;E:\\Git\\Git\\cmd;E:\\python3.7.0\\Scripts\\;E:\\python3.7.0\\;E:\\python3.7.2\\Scripts\\;E:\\python3.7.2\\;C:\\Users\\DELL\\AppData\\Local\\Microsoft\\WindowsApps;E\\pw\\1.bat;E:\\python程序\\venv;E:\\PyCharm 2018.3.3;E:\\Cygwin\\bin;E:\\Java\\bin;E:\\phpstorm\\PhpStorm 2018.3.6\\bin;E:\\MIKTeX\\miktex\\bin\\x64\\;E:\\python黑客编程\\venv\\lib\\site-packages\\numpy\\.libs', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PHPSTORM': 'E:\\phpstorm\\PhpStorm 2018.3.6\\bin;', 'PROCESSOR_ARCHITECTURE': 'x86', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9e09', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '(venv) $P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM_HOSTED': '1', 'PYCHARM_MATPLOTLIB_PORT': '50392', 'PYTHONIOENCODING': 'UTF-8', 'PYTHONPATH': 'E:\\python黑客编程;E:\\PyCharm 2018.3.5\\helpers\\pycharm_matplotlib_backend', 'PYTHONUNBUFFERED': '1', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\DELL\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\DELL\\AppData\\Local\\Temp', 'USERDOMAIN': 'DESKTOP-A40F9PR', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-A40F9PR', 'USERNAME': 'DELL', 'USERPROFILE': 'C:\\Users\\DELL', 'VIRTUAL_ENV': 'E:\\python榛戝\ue179缂栫▼\\venv', 'WINDIR': 'C:\\WINDOWS', '_OLD_VIRTUAL_PATH': 'E:\\Xshell\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Java\\jdk-12.0.2\\bin;E:\\Git\\Git\\cmd;E:\\python3.7.0\\Scripts\\;E:\\python3.7.0\\;E:\\python3.7.2\\Scripts\\;E:\\python3.7.2\\;C:\\Users\\DELL\\AppData\\Local\\Microsoft\\WindowsApps;E\\pw\\1.bat;E:\\python绋嬪簭\\venv;E:\\PyCharm 2018.3.3;E:\\Cygwin\\bin;E:\\Java\\bin;E:\\phpstorm\\PhpStorm 2018.3.6\\bin;E:\\MIKTeX\\miktex\\bin\\x64\\', '_OLD_VIRTUAL_PROMPT': '$P$G', '__PYVENV_LAUNCHER__': 'E:\\python黑客编程\\venv\\Scripts\\python.exe'})